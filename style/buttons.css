.btn {
    --btn-bg-color: var(--text-color-primary);
    --btn-color: var(--bg-color) border: 0;
    background-color: transparent;

    /* Botão que receber essa classe 
        tera como padrão o display flex e 
        seus filhos alinhados ao centro
        com tamanho ajustado automaticamente a eles */
    display: flex;
    align-items: center;
    justify-content: center;
    width: fit-content;

    border-radius: .5rem;

    font: var(--fw-md) var(--fs-base)/1.5rem var(--ff-sans);

    cursor: pointer;

    background: var(--btn-bg-color);
    color: var(--btn-color);
}

.btn:hover {
    --btn-bg-color: linear-gradient(90deg,
            var(--brand-color-secondary) 0%,
            var(--brand-color-primary) 100%);
    --btn-color: var(--surface-color);
}

.btn-sm {
    padding: .5rem 1rem;
    font-size: var(--fs-sm);
}

.btn-md {
    padding: 0.75rem 1.5rem;
    font-size: var(--fs-base);
}

.btn-lg {
    padding: 1rem 2rem;
    font-size: 1.125rem;
}

/* Essa estratégia é utilizada para aplicar
    o gradiente no botão

    ?? O botão não pega a função transparent nessa situação
    
    Os botões não vão possuir "label" diretamente
    entre as tags do HTML, será usada a função attr(aria-label)
    onde aria-label terá a definição do label
*/
.btn[aria-label] {
    position: relative;

    &::before {
        content: "";
        position: absolute;
        border-radius: inherit;
        inset: 0.09375rem;
        background-color: var(--bg-color);
    }

    &::after {
        content: attr(aria-label);
        background: var(--btn-bg-color);
        --webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        position: relative;
        z-index: 1;
    }
}